# Don't ask for confirmations
#assume_yes = true

# Disable specific steps - same options as the command line flag
disable = ["emacs"]

# Ignore failures for these steps
#ignore_failures = ["powershell"]

# Run specific steps - same options as the command line flag
#only = ["system", "emacs"]

# Do not ask to retry failed steps (default: false)
no_retry = false

# Sudo command to be used
sudo_command = "sudo"

# Run `sudo -v` to cache credentials at the start of the run; this avoids a
# blocking password prompt in the middle of a possibly-unattended run.
#pre_sudo = false

# Run inside tmux
run_in_tmux = false

# List of remote machines with Topgrade installed on them
#remote_topgrades = ["toothless", "pi", "parnas"]

# Arguments to pass SSH when upgrading remote systems
#ssh_arguments = "-o ConnectTimeout=2"

# Path to Topgrade executable on remote machines
#remote_topgrade_path = ".cargo/bin/topgrade"

# Arguments to pass tmux when pulling Repositories
#tmux_arguments = "-S /var/tmux.sock"

# Do not set the terminal title
set_title = false

# Display the time in step titles
# display_time = true

# Cleanup temporary or old files
#cleanup = true

# Skip sending a notification at the end of a run
#skip_notify = true

# Skip the preamble displayed when topgrade is run
display_preamble = false

[git]
#max_concurrency = 5
# Additional git repositories to pull
#repos = [
#    "~/src/*/",
#    "~/.config/something"
#]

# Don't pull the predefined git repos
#pull_predefined = false

# Arguments to pass Git when pulling Repositories
#arguments = "--rebase --autostash"

[composer]
#self_update = true

# Commands to run before anything
[pre_commands]
#"Emacs Snapshot" = "rm -rf ~/.emacs.d/elpa.bak && cp -rl ~/.emacs.d/elpa ~/.emacs.d/elpa.bak"

# Custom commands
[commands]
#"Python Environment" = "~/dev/.env/bin/pip install -i https://pypi.python.org/simple -U --upgrade-strategy eager jupyter"

[brew]
#greedy_cask = true
#autoremove = true

[linux]
# Arch Package Manager to use. Allowed values: autodetect, pacman, paru, yay
#arch_package_manager = "pacman"
# Arguments to pass yay (or paru) when updating packages
#yay_arguments = "--nodevel"
# Arguments to pass dnf when updating packages
#dnf_arguments = "--refresh"
#show_arch_news = true
#enable_tlmgr = true
emerge_sync_flags = ""
emerge_update_flags = "-ut --unordered-display --keep-going --verbose-conflicts --with-bdeps=y --newuse --deep @world"
#redhat_distro_sync = false
#rpm_ostree = false
#nix_arguments = "--flake"

[python]
enable_pip_review = true   ###disabled by default
#enable_pipupgrade = true   ###disabled by default

[npm]
# Use sudo if the NPM directory isn't owned by the current user
use_sudo = true

[firmware]
# Offer to update firmware; if false just check for and display available updates
upgrade = false

[flatpak]
# Use sudo for updating the system-wide installation
#use_sudo = true

[distrobox]
#use_root = false
#containers = ["archlinux-latest"]
